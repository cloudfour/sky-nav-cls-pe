<div class="o-page__header t-dark">
	<div class="c-sky-nav js-sky-nav" data-state="is-default">
		<a class="c-button c-sky-nav__skip" href="#main">
			<span class="c-button__content"> Skip to main content</span>
		</a>
		<header class="c-sky-nav__content">
			<div class="c-sky-nav__masthead">
				<a class="c-sky-nav__logo" href="/">
					<span class="u-hidden-visually">Home: Cloud Four</span>
					<svg
						class="c-sky-nav__logo-object"
						width="72"
						height="54"
						viewBox="0 0 540 405"
						focusable="false"
					>
						<path
							class="c-sky-nav__logo-outline"
							d="M522,222.27c0-56.15-29.26-86.06-53.77-101.27a143.05,143.05,0,0,0-47-18.32,136.88,136.88,0,0,0-38.78-40.13,172.65,172.65,0,0,0-45.52-21.86,225,225,0,0,0-65.42-10.32c-1.68,0-2.82,0-3.33.05-33.55,0-63.06,5.63-87.72,16.67-20.21,9-37.2,21.71-50.48,37.64a126.67,126.67,0,0,0-25.32,48.67,168.25,168.25,0,0,0-39.44,22.17C34.32,179.13,18,210.4,18,246c0,50.48,26.12,88.79,75.52,110.79,34.93,15.54,69.42,17.44,72.62,17.59,1,.06,5.12.31,11.63.31,21.17,0,74.58-2.73,126.06-27.23a105.14,105.14,0,0,0,56.7,16.43c1.41,0,2.85,0,4.26-.08s2.92.09,4.37.09a103.41,103.41,0,0,0,68.15-25.51C473,331.32,499,309.12,512.47,274A147.44,147.44,0,0,0,522,222.27Z"
							fill="none"
							stroke-miterlimit="10"
							stroke-width="24"></path>
						<path
							d="M165,264.82a87.23,87.23,0,0,1-38.2-45.8,37.25,37.25,0,0,1,10.4-20c9.6-11,121.4-132.6,168.8-153.4a233.3,233.3,0,0,0-37.6-3.2c-140,0-153.4,100-153.4,100s-85,26-85,103.6c0,111,136.8,116.4,136.8,116.4a307,307,0,0,0,43.2-1.6,25.81,25.81,0,0,0,17.8-14.2c8.2-20,20-51.8,31.6-85.2C214,263.62,170,265.82,165,264.82Z"
						></path>
						<path
							d="M510,222.42c0-98.2-96.2-108.8-96.2-108.8a122.12,122.12,0,0,0-42.8-44c-8.6,30.6-30.8,112.2-32,127.6h33.6s5.4,0,4,6.6c-3.2,15-11.6,51.6-29.6,52.8l-23.6,1.4c-6.6,27-13.6,55.2-18.6,75.6a94,94,0,0,0,60,18.2,91.81,91.81,0,0,0,67-24.6C512.79,313.62,510,222.42,510,222.42Z"
						></path>
						<path
							d="M307.79,99.62A846.59,846.59,0,0,0,208,202.42l72.2-2.8c14.8-41.6,27.6-78.6,33.2-94.8A6,6,0,0,0,307.79,99.62Z"
						></path>
					</svg>
				</a>
			</div>
			<nav class="c-sky-nav__menu" aria-labelledby="menu-label">
				<h2 id="menu-label" class="u-hidden-visually">Main Menu</h2>
				<!-- @todo Make button or anchor -->
				<button class="c-button c-sky-nav__menu-toggle js-sky-nav-menu-toggle">
					<span class="c-button__content">
						<span class="u-hidden-visually">Toggle Main</span>
						Menu
					</span>
				</button>
				<ul class="c-sky-nav__menu-items" role="list">
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> What We Do</span>
						</a>
					</li>
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> Our Approach</span>
						</a>
					</li>
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> Our Work</span>
						</a>
					</li>
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> Articles</span>
						</a>
					</li>
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> Speaking</span>
						</a>
					</li>
					<li class="c-sky-nav__menu-item">
						<a class="c-sky-nav__menu-action" href="#">
							<span class="c-sky-nav__menu-label"> Team</span>
						</a>
					</li>
				</ul>
			</nav>
		</header>
	</div>
	<!-- @todo Add component to pass in JS? -->
	<!-- <script>
		// @todo Add comment
		document.querySelector<HTMLElement>('.js-sky-nav').dataset.state =
			'is-loading';
	</script> -->
</div>

<script>
	console.log('SKYNAV What');
	/**
	 * This is a simplified version of the Sky Nav Menu for demo purposes
	 *
	 * Create Sky Nav Menu
	 *
	 * Adds an event listener to the toggle button of a Sky Nav component for click
	 * events, which runs the toggle command to show or hide the menu with animation.
	 * Responds to breakpoint changes to show or hide the nav for large and small
	 * screens. Returns an object containing a `destroy()` method to remove the
	 * event listener.
	 *
	 * @param navButton - the toggle button for the navigation
	 */
	export const initSkyNav = (navButton: HTMLButtonElement) => {
		const DISABLE_ANIMATION = false;
		console.log('initSkyNav in action');

		const menu = navButton.nextElementSibling as HTMLElement;
		const navWrapper = navButton.closest('.js-sky-nav') as HTMLElement;
		const largeScreenMediaQuery = window.matchMedia('(min-width: 40em)');
		// @todo Is this needed for the demo?
		const reducedMotionMediaQuery = window.matchMedia(
			'(prefers-reduced-motion: reduce)'
		);

		if (document.body.dataset.demo === 'synchronous-inline-script') {
			// The Sky Nav component has inline synchronous JS logic to add an `is-loading`
			// state to remove the layout shift at smaller viewports. That state no longer
			// applies at this point since the Sky Nav JS has loaded & is ready to take over.
			navWrapper.dataset.state = 'is-ready';
		}

		/**
		 * Update Menu Layout
		 * Sets visibility of menu & navButton for small vs large screen layouts.
		 */
		const update = () => {
			const isLargeScreen = largeScreenMediaQuery.matches;
			if (isLargeScreen) {
				navButton.removeAttribute('aria-expanded');
				menu.hidden = false;
			} else {
				navButton.setAttribute('aria-expanded', 'false');
				menu.hidden = true;
			}
		};

		let timeoutId = -1;

		/**
		 * Toggle Menu State (expanded/closed)
		 * Sets aria-expanded & hidden attributes to show or hide the menu.
		 */
		const toggle = () => {
			const isExpanded = navButton.getAttribute('aria-expanded') === 'true';

			navButton.setAttribute('aria-expanded', String(!isExpanded));

			// If no animation, then I shouldn't need this
			// @todo Do I need this for the demo?
			if (reducedMotionMediaQuery.matches || DISABLE_ANIMATION) {
				menu.hidden = isExpanded;
				return;
			}

			const duration = 0.4;
			const transition = `transform ${duration}s cubic-bezier(0.455, 0.03, 0.515, 0.955)`;
			clearTimeout(timeoutId);

			menu.hidden = false;
			const heightDiff = menu.getBoundingClientRect().height;
			if (isExpanded) {
				// Closing menu: slide the elements up before hiding the menu
				document.body.style.setProperty('transition', transition);
				document.body.style.setProperty(
					'transform',
					`translateY(${-heightDiff}px)`
				);

				timeoutId = setTimeout(() => {
					menu.hidden = true;
					document.body.style.removeProperty('transition');
					document.body.style.removeProperty('transform');
				}, duration * 1000) as any as number;
			} else {
				// Opening menu: start the elements higher than their "resting position" and then slide them down
				document.body.style.setProperty(
					'transform',
					`translateY(${-heightDiff}px)`
				);
				// Flush changes to the DOM
				// eslint-disable-next-line @cloudfour/typescript-eslint/no-unused-expressions, mdx/no-unused-expressions
				navWrapper.offsetWidth;
				document.body.style.setProperty('transition', transition);
				document.body.style.removeProperty('transform');
				timeoutId = setTimeout(() => {
					document.body.style.removeProperty('transition');
				}, duration * 1000) as any as number;
			}
		};

		navButton.addEventListener('click', toggle);
		// Run the update method when the media query status changes
		largeScreenMediaQuery.addEventListener('change', update);

		// Run the update method once to set the initial layout correctly
		update();

		/** Clean up event listeners */
		const destroy = () => {
			navButton.removeEventListener('click', toggle);
			largeScreenMediaQuery.removeEventListener('change', update);
		};

		// Return a public API for consumers of this component
		return { destroy };
	};

	initSkyNav(document.querySelector('.js-sky-nav-menu-toggle'));
</script>
